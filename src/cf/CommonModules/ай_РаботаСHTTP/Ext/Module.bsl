
#Область РаботаСHTTP

Функция ОтправитьЗапросНаСервер(АдресРесурса, Метод, ПараметрыСоединение, BODY_PARAMETERS = Неопределено, QUERY_PARAMETERS = Неопределено, PATH_PARAMETERS = Неопределено) Экспорт
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСоединение.Адрес,,,,,60, ssl); 
	
	ЗаполнитьПараметрыАдресаРесурса(АдресРесурса, QUERY_PARAMETERS, PATH_PARAMETERS);
	
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	
	Для Каждого Заголовок Из ПараметрыСоединение.Заголовки Цикл
		Запрос.Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(BODY_PARAMETERS) И ТипЗнч(BODY_PARAMETERS) = Тип("Строка") Тогда
		Запрос.УстановитьТелоИзСтроки(BODY_PARAMETERS);
	ИначеЕсли ЗначениеЗаполнено(BODY_PARAMETERS) Тогда 
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON(BODY_PARAMETERS), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	Попытка
		
		Если Метод = "GET" Тогда 
			Ответ = HTTPСоединение.Получить(Запрос);
		ИначеЕсли Метод = "POST" Тогда
			Ответ = HTTPСоединение.ОтправитьДляОбработки(Запрос);
		ИначеЕсли Метод = "PUT" Тогда
			Ответ = HTTPСоединение.Записать(Запрос);
		Иначе
			
			СтруктураОтвета = Новый Структура();
			СтруктураОтвета.Вставить("КодСостояния", Неопределено);
			СтруктураОтвета.Вставить("ТекстОшибки", СтрШаблон("Не верно передано имя метода: %1", Метод));
			Возврат СтруктураОтвета;
			
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ОписаниеОшибки();	
		
		СтруктураОтвета = Новый Структура();
		СтруктураОтвета.Вставить("КодСостояния", Неопределено);
		СтруктураОтвета.Вставить("ТекстОшибки", ИнформацияОбОшибке);
		
		Возврат СтруктураОтвета;
		
	КонецПопытки;
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();

	Если Ответ.КодСостояния = 200 Тогда 
		
		СтруктураОтвета = ОбъектJSON(ТелоОтвета);
		
		Если ТипЗнч(СтруктураОтвета) <> Тип("Структура") Тогда 
			Ответ_ОбъектJSON = СтруктураОтвета;
			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("ТелоОтвета", Ответ_ОбъектJSON);
		КонецЕсли;
		
	Иначе
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("ТелоОтвета", ТелоОтвета);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("КодСостояния", Ответ.КодСостояния);

	Возврат СтруктураОтвета;
	
КонецФункции

Процедура ЗаполнитьПараметрыАдресаРесурса(АдресРесурса, QUERY_PARAMETERS = Неопределено, PATH_PARAMETERS = Неопределено) Экспорт 
	
	Если PATH_PARAMETERS <> Неопределено Тогда 
		Для Каждого КлючЗначение Из PATH_PARAMETERS Цикл
			АдресРесурса = СтрЗаменить(АдресРесурса, СтрШаблон("{%1}", КлючЗначение.Ключ), КлючЗначение.Значение);	
		КонецЦикла;
	КонецЕсли;
	
	Если QUERY_PARAMETERS <> Неопределено Тогда 
		ПараметрыЗапроса = Новый Массив();
		Для Каждого КлючЗначение Из QUERY_PARAMETERS Цикл
			ПараметрыЗапроса.Добавить(СтрШаблон("%1=%2", КлючЗначение.Ключ, КлючЗначение.Значение));	
		КонецЦикла;
		АдресРесурса = СтрШаблон("%1?%2", АдресРесурса, СтрСоединить(ПараметрыЗапроса, "&"));
	КонецЕсли;
	
КонецПроцедуры

Функция СтрокаJSON(ОбъектJSON) Экспорт
	
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(Запись, ОбъектJSON);
	
	Возврат Запись.Закрыть();
	
КонецФункции

Функция ОбъектJSON(СтрокаJSON) Экспорт
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаJSON);
	ОбъектJSON = ПрочитатьJSON(Чтение);
	Чтение.Закрыть();
	
	Возврат ОбъектJSON;
	
КонецФункции

Функция ПреобразоватьВДату(ДатаТекст) Экспорт
	
	ДатаСтрокой = СтрЗаменить(ДатаТекст, "-", "");
	ДатаСтрокой = СтрЗаменить(ДатаСтрокой, "T", "");
	ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ":", "");
	ДатаСтрокой = СтрЗаменить(ДатаСтрокой, " ", "");
	Если ПустаяСтрока(ДатаСтрокой) Тогда
		Возврат '00010101';
	КонецЕсли;
	Возврат Дата(Лев(ДатаСтрокой, 14));
	
КонецФункции

Процедура ВывестиСообщениеОбОшибке(ИнформацияОбОшибке, ИмяСобытия, СсылкаДанные = Неопределено) Экспорт 
	
	ОбщегоНазначения.СообщитьПользователю(ИнформацияОбОшибке);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,, 
		СсылкаДанные,
		ИнформацияОбОшибке);
	
КонецПроцедуры

Функция ТипТекстовЭлектронныхПисем(Наименование) Экспорт
	
	Возврат Перечисления.ТипыТекстовЭлектронныхПисем[Наименование];
	
КонецФункции   

Функция СформироватьСписокПолучателейСообщения(НастройкаСинхронизации)
	
	Кому = Новый Массив;

	Для Каждого СтрокаПолучатель Из НастройкаСинхронизации.Получатели Цикл 
		ПолучательСообщения = Новый Структура();
		ПолучательСообщения.Вставить("Представление", СтрокаПолучатель.Представление);
		ПолучательСообщения.Вставить("Адрес", СтрокаПолучатель.Адрес);
		Кому.Добавить(ПолучательСообщения);
	КонецЦикла;
	
	Возврат Кому;
	
КонецФункции

#КонецОбласти

